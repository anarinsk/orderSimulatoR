str_view(x, "\\\\")
x <- "a\\b"
str_view(x, "\\\\")
writeLines(x)
length(sentences)
head(sentences)
colours <- c("red", "orange", "yellow", "green", "blue", "purple")
colour_match <- str_c(colours, collapse = "|")
colour_match
has_colour <- str_subset(sentences, colour_match)
matches <- str_extract(has_colour, colour_match)
head(matches)
head(has_colour)
more <- sentences[str_count(sentences, colour_match) > 1]
str_view_all(more, colour_match)
str_extract_all(more, colour_match, simplify = TRUE)
x <- c("a", "a b", "a b c")
str_extract_all(x, "[a-z]", simplify = TRUE)
noun <- "(a|the) ([^ ]+)"
has_noun <- sentences %>%
str_subset(noun)
has_noun %>%
str_extract(noun)
has_noun %>%
str_match(noun)
tibble(sentence = sentences) %>%
tidyr::extract(
sentence, c("article", "noun"), "(a|the) ([^ ]+)",
remove = FALSE
)
library(dplyr)
tibble(sentence = sentences) %>%
tidyr::extract(
sentence, c("article", "noun"), "(a|the) ([^ ]+)",
remove = FALSE
)
x <- c("apple", "pear", "banana")
str_replace(x, "[aeiou]", "-")
sentences %>%
str_replace("([^ ]+) ([^ ]+) ([^ ]+)", "\\1 \\3 \\2") %>%
head(5)
str_view(fruit, regex("nana"))
bananas <- c("banana", "Banana", "BANANA")
str_view(bananas, "banana")
str_view(bananas, regex("banana", ignore_case = TRUE))
devtools::install_github("hadley/forcats")
library(ggplot2)
library(dplyr)
x <- c("pear", "apple", "banana", "apple", "pear", "apple")
factor(x, levels = c("apple", "banana", "pear"))
x
factor(x, levels = c("apple", "banana"))
factor(x, levels = c("apple", "banana", "pear"))
gss_cat
install.packages("gss_cat")
forcats::gss_cat
gss_cat %>%
count(race)
forcats::gss_cat %>%
count(race)
gss_cat <- forcats::gss_cat
gss_cat %>% count(race)
ggplot(gss_cat, aes(race)) + geom_bar()
relig <- gss_cat %>%
group_by(relig) %>%
summarise(
age = mean(age, na.rm = TRUE),
tvhours = mean(tvhours, na.rm = TRUE),
n = n()
)
ggplot(relig, aes(tvhours, relig)) + geom_point()
ggplot(relig, aes(tvhours, fct_reorder(relig, tvhours))) + geom_point()
library(forcats)
ggplot(relig, aes(tvhours, fct_reorder(relig, tvhours))) + geom_point()
by_age <- gss_cat %>%
filter(!is.na(age)) %>%
group_by(age, marital) %>%
count() %>%
mutate(prop = n / sum(n))
View(by_age)
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital")
ggplot(by_age, aes(age, prop, colour = marital)) +
geom_line(na.rm = TRUE)
ggplot(by_age, aes(age, prop, colour = fct_reorder2(marital, age, prop))) +
geom_line() +
labs(colour = "marital")
frame_data(
~date ~new_entry ~DAU ~rev_KRW
08월01일(월)	      74,313 	   150,491 	 253,638,178
08월02일(화)	      78,384 	   165,030 	 289,330,205
08월03일(수)	      75,437 	   169,319 	 267,902,858
08월04일(목)	      66,042 	   160,851 	 258,281,326
08월05일(금)	      49,725 	   127,005 	 229,451,963
08월06일(토)	      44,436 	   113,522 	 236,342,230
08월07일(일)	      35,793 	   107,171 	 255,126,571
08월08일(월)	      29,534 	    94,508 	 246,078,896
08월09일(화)	      23,555 	    88,136 	 271,073,230
08월10일(수)	       8,134 	    66,537 	 208,965,304
08월11일(목)	       7,080 	    61,231 	 217,538,640
08월12일(금)	       8,050 	    59,861 	 205,384,152
08월13일(토)	       9,692 	    60,480 	 219,568,202
08월14일(일)	       9,337 	    59,677 	 176,564,232
08월15일(월)	       7,991 	    57,112 	 199,312,901
08월16일(화)	       7,294 	    55,200 	 198,024,267
)
frame_data(
~date ~new_entry ~DAU ~rev_KRW
08월01일(월)	      74,313 	   150,491 	 253,638,178
08월02일(화)	      78,384 	   165,030 	 289,330,205
08월03일(수)	      75,437 	   169,319 	 267,902,858
08월04일(목)	      66,042 	   160,851 	 258,281,326
08월05일(금)	      49,725 	   127,005 	 229,451,963
08월06일(토)	      44,436 	   113,522 	 236,342,230
08월07일(일)	      35,793 	   107,171 	 255,126,571
08월08일(월)	      29,534 	    94,508 	 246,078,896
08월09일(화)	      23,555 	    88,136 	 271,073,230
08월10일(수)	       8,134 	    66,537 	 208,965,304
08월11일(목)	       7,080 	    61,231 	 217,538,640
08월12일(금)	       8,050 	    59,861 	 205,384,152
08월13일(토)	       9,692 	    60,480 	 219,568,202
08월14일(일)	       9,337 	    59,677 	 176,564,232
08월15일(월)	       7,991 	    57,112 	 199,312,901
08월16일(화)	       7,294 	    55,200 	 198,024,267
)
frame_data(
~date ~new_entry ~DAU ~rev_KRW
08월01일(월),	      74313, 	   150491, 	 253638178,
08월02일(화),	      78384, 	   165030,	 289330205,
08월03일(수),	      75437,	   169319,	 267902858,
08월04일(목),	      66042, 	   160851, 	 258281326,
08월05일(금),	      49725, 	   127005,	 229451963,
08월06일(토),	      44436, 	   113522, 	 236342230,
08월07일(일),	      35793, 	   107171, 	 255126571,
08월08일(월),	      29534, 	    94508, 	 246078896,
08월09일(화),	      23555, 	    88136, 	 271073230,
08월10일(수),	       8134, 	    66537, 	 208965304,
08월11일(목),	       7080, 	    61231, 	 217538640,
08월12일(금),	       8050, 	    59861, 	 205384152,
08월13일(토),	       9692, 	    60480, 	 219568202,
08월14일(일),	       9337, 	    59677, 	 176564232,
08월15일(월),	       7991,	    57112, 	 199312901,
08월16일(화),	       7294, 	    55200, 	 198024267
)
setwd("~/")
library(readr)
data <- read_csv(snale.csv)
data <- read_csv("snale.csv")
View(data)
library(readr, realxl)
data_read_xl("snale.xlsx")
data <- read_xl("snale.xlsx")
data <- read_excel("snale.xlsx")
library(readr, readxl)
data <- read_excel("snale.xlsx")
data <- read_xl("snale.xlsx")
library(readxl)
data <- read_excel("snale.xlsx")
View(data)
test <- data %>% str_replace("//s","")
test <- data %>% mutate_each(funs(str_replace("//s","")))
test <- data %>% mutate_each(funs(str_replace("//s","")))
test <- data %>% mutate_each(funs{x}(str_replace(x, "//s","")))
test <- data %>% mutate_each(funs(str_replace(x, "//s","")))
test <- data %>% mutate_each(funs(str_replace_all(x, "//s","")))
test <- data %>% str_replace_all(x, "//s",""))
test <- data %>% str_replace_all(x, "//s","")
test <- data %>% str_replace_all("//s","")
test <- tibble(data %>% str_replace_all("//s",""))
View(test)
test <- data %>% str_replace_all("//s","")) %>% frame_data
test <- data %>% str_replace_all("//s","") %>% frame_data
test <- data %>% str_replace_all("//s","") %>% frame_data()
test <- data %>% str_replace_all("//s","") %>% tbble
test <- data %>% str_replace_all("//s","") %>% tibble
View(test)
data <- read_excel("snale.xlsx")
data[[1]]
data[[2]]
data[[2]] %>% str_replace_all("//s", "")
data[[2]] %>% str_replace_all("//s+", "")
data[[2]] %>% str_replace_all("\\s+", "")
test <- data %>% mutate_each(funs(str_replace_all("\\s+", "")))
test <- data %>% mutate_each(funs(x){str_replace_all(x, "\\s+", "")})
test <- data %>% mutate_each(funs(str_replace_all(., "\\s+", "")))
View(test)
View(data)
test <- data %>% mutate_each(funs(str_replace_all(., "\\s+", ""))) %>% mutate_each(funs(as.numeric), -date)
View(test)
library(lubridate
library(lubridate)
test <- data %>% mutate_each(funs(str_replace_all(., "\\s+", ""))) %>% mutate_each(funs(as.numeric), -date)
test <- test %>% mutate_at(vars(date), funs(., ymd)
test <- test %>% mutate_at(vars(date), funs(., ymd))
test <- test %>% mutate_at(vars(date), funs(ymd))
library(lubridate)
install.packages("ymd")
library(lubridate)
install.packages("lubridate")
library(lubridate)
test <- test %>% mutate_at(vars(date), funs(ymd))
View(test)
rnorm(100) %>%
matrix(ncol = 2) %>%
plot() %>%
str()
rnorm(100) %>%
matrix(ncol = 2) %>%
plot() %>%
str()
libary(dplyr)
library(dplyr)
rnorm(100) %>%
matrix(ncol = 2) %>%
plot() %>%
str()
rnorm(100) %>%
matrix(ncol = 2) %>%
plot() %>%
str()
rnorm(100) %>%
matrix(ncol = 2) %T>%
plot() %>%
str()
near(sqrt(2) ^ 2,  2)
switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
test <- switch(x,
a = ,
b = "ab",
c = ,
d = "cd"
)
test1 <- function(type) {
switch(type,
mean = 1,
median = 2,
trimmed = 3)
}
test2 <- function(type) {
if (type == "mean") 1
else if (type == "median") 2
else if (type == "trimmed") 3
}
test1("mean")
test1(mean)
test1("mean")
test <- function(x){
switch(x,
a = ,
b = "ab",
c = ,
d = "cd")
}
test("z")
test("a")
test("b")
test("c")
test("d")
rule <- function(..., pad = "-") {
title <- paste0(...)
width <- getOption("width") - nchar(title) - 5
cat(title, " ", stringr::str_dup(pad, width), "\n", sep = "")
}
rule("Important output")
rule("Important output")
`+` <- function(x, y) {
if (runif(1) < 0.1) {
sum(x, y)
} else {
sum(x, y) * 1.1
}
}
table(replicate(1000, 1 + 2))
table(replicate(1000000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
table(replicate(10000, 1 + 2))
library(purrr)
typeof(letters)
1:10 %% 3 == 0
typeof(1)
a <- list(a = 1:3, b = "a string", c = pi, d = list(-1, -5))
str(a[1:2])
str(a[4])
str(y[[1]])
str(a[[1]])
y <- list("a", 1L, 1.5, TRUE)
df <- tibble::tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
seq_along(df)
seq_along(df)
results <- vector("list", length(x))
means <- c(0, 1, 2)
output <- double()
for (i in seq_along(means)) {
n <- sample(100, 1)
output <- c(output, rnorm(n, means[[i]]))
}
str(output)
seq_along(means)
out <- vector("list", length(means))
for (i in seq_along(means)) {
n <- sample(100, 1)
out[[i]] <- rnorm(n, means[[i]])
}
str(out)
map_dbl(df, mean)
library(purrr)
map_dbl(df, mean)
map_dbl(df, sd)
models <- mtcars %>%
split(.$cyl) %>%
map(function(df) lm(mpg ~ wt, data = df))
x <- list(1, 10, "a")
y <- x %>% map(safely(log))
str(y)
y <- y %>% transpose()
str(y)
n <- list(1, 3, 5)
args1 <- list(n, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
n <- list(1, 3, 5)
args1 <- list(n, mu, sigma)
mu <- list(5, 10, -3)
sigma <- list(1, 5, 10)
args1 <- list(n, mu, sigma)
args1 %>%
pmap(rnorm) %>%
str()
x <- list(1, "a", 3)
x %>%
walk(print)
x <- 1:5
rep_along(x, 1:2)
rep_along(x, 1)
list_along(x)
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .)) %>%
map(summary) %>%
map_dbl("r.squared")
random_group <- function(n, probs) {
probs <- probs / sum(probs)
g <- findInterval(seq(0, 1, length = n), c(0, cumsum(probs)),
rightmost.closed = TRUE)
names(probs)[sample(g)]
}
random_group(100, c(0.8,0.2))
random_group(100,  c(training = 0.8, test = 0.2))
artition <- function(df, n, probs) {
replicate(n, split(df, random_group(nrow(df), probs)), FALSE) %>%
transpose() %>%
as_data_frame()
}
boot <- partition(mtcar, 100, c(training=0.8, test=0.2))
partition <- function(df, n, probs) {
replicate(n, split(df, random_group(nrow(df), probs)), FALSE) %>%
transpose() %>%
as_data_frame()
}
random_group(100,  c(training = 0.8, test = 0.2))
boot <- partition(mtcar, 100, c(training=0.8, test=0.2))
boot <- partition(mtcars, 100, c(training=0.8, test=0.2))
library(dplyr)
boot <- partition(mtcars, 100, c(training=0.8, test=0.2))
View(boot)
head(boot)
library(xlsx)
customers <- read.xlsx("./data/bikeshops.xlsx", sheetIndex = 1)
customers <- read.xlsx("./data/bikeshops.xlsx", sheetIndex = 1)
setwd("~/GitHub/orderSimulatoR")
customers <- read.xlsx("./data/bikeshops.xlsx", sheetIndex = 1)
products <- read.xlsx("./data/bikes.xlsx", sheetIndex = 1)
orders <- read.xlsx("./data/orders.xlsx", sheetIndex = 1)
library(dplyr)
head(customers)
head(orders)
head(products)
orders.extended <- merge(orders, customers, by.x = "customer.id", by.y="bikeshop.id")
orders.extended <- merge(orders.extended, products, by.x = "product.id", by.y = "bike.id")
orders.extended <- orders.extended %>%
mutate(price.extended = price * quantity) %>%
select(order.date, order.id, order.line, bikeshop.name, model,
quantity, price, price.extended, category1, category2, frame) %>%
arrange(order.id, order.line)
knitr::kable(head(orders.extended)) # Preview the data
knitr::kable(sample_n(orders.extended, 10)) # Preview the data
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
libary(tidyr)
library(tidyr)
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
View(customerTrends)
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity))
View(customerTrends)
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
View(customerTrends)
customerTrends[is.na(customerTrends)] <- 0  # Remove NA's
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity))
View(customerTrends)
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
View(customerTrends)
customerTrends[is.na(customerTrends)] <- 0  # Remove NA's
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
customerTrends$price <- cut2(customerTrends$price, g=2)
customerTrends.mat <- as.matrix(customerTrends[,-(1:5)])
customerTrends.mat <- prop.table(customerTrends.mat, margin = 2)
View(customerTrends.mat)
customerTrends <- cbind(customerTrends[,1:5], as.data.frame(customerTrends.mat))
knitr::kable(head(customerTrends))
View(customerTrends)
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
customerTrends[is.na(customerTrends)] <- 0  # Remove NA's
# Convert price to binary high/low category -------------------------------
#install.packages("Hmisc")
library(Hmisc)
customerTrends$price <- cut2(customerTrends$price, g=2)
customerTrends.mat <- as.matrix(customerTrends[,-(1:5)])
customerTrends.mat <- prop.table(customerTrends.mat, margin = 2)
customerTrends <- cbind(customerTrends[,1:5], as.data.frame(customerTrends.mat))
View(customerTrends)
View(customerTrends.mat)
tcustomerTrends <- cbind(customerTrends[,1:5], as.data.frame(customerTrends.mat))
customerTrends <- orders.extended %>%
group_by(bikeshop.name, model, category1, category2, frame, price) %>%
summarise(total.qty = sum(quantity)) %>%
spread(bikeshop.name, total.qty)
customerTrends[is.na(customerTrends)] <- 0  # Remove NA's
# Convert price to binary high/low category -------------------------------
#install.packages("Hmisc")
library(Hmisc)
customerTrends$price <- cut2(customerTrends$price, g=2)
# Convert customer pruchase quantity to percentage of total quantity --------
customerTrends.mat <- as.matrix(customerTrends[,-(1:5)])
customerTrends.mat <- prop.table(customerTrends.mat, margin = 2)
tcustomerTrends <- cbind(customerTrends[,1:5], as.data.frame(customerTrends.mat))
View(tcustomerTrends)
t <- as.data.frame(customerTrends.mat)
View(t)
tcustomerTrends <- cbind(customerTrends[,1:5],t)
View(tcustomerTrends)
View(customerTrends)
tcustomerTrends <- cbind(customerTrends[, c(1:5)], t)
t1 <- customerTrends[, c(1:5)]
t2 <- as.data.frame(customerTrends.mat)
tcustomerTrends <- cbind(t1, t2)
tcustomerTrends <- as.data.frame(cbind(t1, t2))
View(tcustomerTrends)
tcustomerTrends <- bind_cols(t1,t2)
View(tcustomerTrends)
knitr::kable(head(customerTrends))
library(cluster) # Needed for silhouette function
kmeansDat <- customerTrends[,-(1:5)]
kmeansDat.t <- t(kmeansDat)
View(kmeansDat.t)
View(kmeansDat)
km.out <- list()
sil.out <- list()
x <- vector()
y <- vector()
minClust <- 4      # Hypothesized minimum number of segments
maxClust <- 8      # Hypothesized maximum number of segments
customerTrends <- bind_cols(t1,t2)
knitr::kable(head(customerTrends))
kmeansDat <- customerTrends[,-(1:5)]
kmeansDat.t <- t(kmeansDat)
km.out <- list()
sil.out <- list()
x <- vector()
y <- vector()
minClust <- 4      # Hypothesized minimum number of segments
maxClust <- 8      # Hypothesized maximum number of segments
